name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "9.0.0"

jobs:
  # CI - Code Quality & Testing
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services (detached)
        run: docker-compose -f docker-compose.prod.yml up -d --build

      - name: Install dependencies in backend
        run: docker-compose -f docker-compose.prod.yml exec -T backend pnpm install --frozen-lockfile

      - name: Install dependencies in frontend
        run: docker-compose -f docker-compose.prod.yml exec -T frontend pnpm install --frozen-lockfile

      - name: Type checking (backend)
        run: docker-compose -f docker-compose.prod.yml exec -T backend pnpm run check-types

      - name: Type checking (frontend)
        run: docker-compose -f docker-compose.prod.yml exec -T frontend pnpm run check-types

      - name: Linting (backend)
        run: docker-compose -f docker-compose.prod.yml exec -T backend pnpm run lint

      - name: Linting (frontend)
        run: docker-compose -f docker-compose.prod.yml exec -T frontend pnpm run lint

      - name: Run tests (backend)
        run: docker-compose -f docker-compose.prod.yml exec -T backend pnpm run test

      - name: Run tests (frontend)
        run: docker-compose -f docker-compose.prod.yml exec -T frontend pnpm run test

      - name: Build applications (backend)
        run: docker-compose -f docker-compose.prod.yml exec -T backend pnpm run build

      - name: Build applications (frontend)
        run: docker-compose -f docker-compose.prod.yml exec -T frontend pnpm run build

      - name: Stop services
        run: docker-compose -f docker-compose.prod.yml down

  # CD - Deploy to AWS via SSH
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws_key
          chmod 600 ~/.ssh/aws_key
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to AWS EC2
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment..."

          # Navigate to app directory
          cd /home/ubuntu/ledgerx

          # Pull latest code
          git fetch origin
          git reset --hard origin/main

          # Stop current services
          docker-compose -f docker-compose.prod.yml down || true

          # Build and start services
          docker-compose -f docker-compose.prod.yml up -d --build

          # Clean up
          docker system prune -f

          echo "✅ Deployment completed!"
          EOF

          # Copy and execute deployment script
          scp -i ~/.ssh/aws_key deploy.sh ubuntu@${{ secrets.AWS_HOST }}:/tmp/
          ssh -i ~/.ssh/aws_key ubuntu@${{ secrets.AWS_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.AWS_HOST }}:3000 || exit 1

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment to AWS successful!"
          else
            echo "❌ Deployment to AWS failed!"
          fi