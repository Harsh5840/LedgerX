version: "3.9"

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: apps/ledgerX-backend/Dockerfile
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL}
      GLOBAL_DATABASE_URL: ${GLOBAL_DATABASE_URL}
      
      # Environment
      NODE_ENV: production
      PORT: 5000
      APP_ENV: ${APP_ENV:-production}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      GLOBAL_JWT_SECRET: ${GLOBAL_JWT_SECRET}
      GLOBAL_ENCRYPTION_KEY: ${GLOBAL_ENCRYPTION_KEY}
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      GLOBAL_ALLOWED_ORIGINS: ${GLOBAL_ALLOWED_ORIGINS}
      
      # AI/ML Service Configuration
      HUGGINGFACE_API_TOKEN: ${HUGGINGFACE_API_TOKEN}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      SHARED_GOOGLE_API_KEY: ${SHARED_GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SHARED_OPENAI_API_KEY: ${SHARED_OPENAI_API_KEY}
      
      # OAuth Configuration
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_ID: ${GITHUB_ID}
      GITHUB_SECRET: ${GITHUB_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIR: ${LOG_DIR:-./logs}
      ENABLE_STRUCTURED_LOGGING: ${ENABLE_STRUCTURED_LOGGING:-true}
      
      # Redis Configuration
      GLOBAL_REDIS_URL: ${GLOBAL_REDIS_URL}
      GLOBAL_REDIS_PASSWORD: ${GLOBAL_REDIS_PASSWORD}
      
      # Feature Flags
      ENABLE_FEATURE_FLAGS: ${ENABLE_FEATURE_FLAGS:-true}
      FEATURE_FLAG_SERVICE_URL: ${FEATURE_FLAG_SERVICE_URL}
      
      # Rate Limiting
      GLOBAL_RATE_LIMIT_ENABLED: ${GLOBAL_RATE_LIMIT_ENABLED:-true}
      GLOBAL_RATE_LIMIT_WINDOW: ${GLOBAL_RATE_LIMIT_WINDOW:-900000}
      GLOBAL_RATE_LIMIT_MAX: ${GLOBAL_RATE_LIMIT_MAX:-1000}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      DATADOG_API_KEY: ${DATADOG_API_KEY}
      
      # Backup Configuration
      BACKUP_ENABLED: ${BACKUP_ENABLED:-false}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_S3_REGION: ${BACKUP_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    networks:
      - ledgerx-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    restart: unless-stopped
    environment:
      # Environment
      NODE_ENV: production
      HOSTNAME: "0.0.0.0"
      PORT: 3000
      
      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      BACKEND_URL: ${BACKEND_URL:-http://backend:5000}
      
      # OAuth Configuration (for NextAuth)
      GITHUB_ID: ${GITHUB_ID}
      GITHUB_SECRET: ${GITHUB_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - ledgerx-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  logs:

networks:
  ledgerx-network:
    driver: bridge