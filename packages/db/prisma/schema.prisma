generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  name          String?
  role          Role           @default(USER)
  accounts      Account[]
  entries       LedgerEntry[]
  transactions  Transaction[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Transaction {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  amount        Float
  category      String?
  timestamp     DateTime
  riskScore     Float?         // üîÅ changed from Int
  isFlagged     Boolean
  reasons       String?
  parentId      String?
  description   String?
  createdAt     DateTime       @default(now())
  ledgerEntries LedgerEntry[]
}

model Account {
  id        String        @id @default(uuid())
  name      String
  type      AccountType
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  entries   LedgerEntry[]
  createdAt DateTime      @default(now())
}

model LedgerEntry {
  id            String        @id @default(uuid())
  accountId     String
  account       Account       @relation(fields: [accountId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  type          EntryType
  amount        Float
  timestamp     DateTime      @default(now())
  hash          String
  prevHash      String?
  originalHash  String?
  isReversal    Boolean       @default(false)
  category      String?
  flagged       Boolean       @default(false)
  riskScore     Float?
  description   String?
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])

  @@index([userId, category])  
  @@index([userId, timestamp])
  @@index([riskScore, flagged])
}

enum Role {
  USER
  ADMIN
  AUDITOR
}

enum AccountType {
  WALLET
  SAVINGS
  BUSINESS
}

enum EntryType {
  debit
  credit
}
